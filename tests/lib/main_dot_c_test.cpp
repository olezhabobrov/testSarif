/*
 * This file is automatically generated by UnitTestBot. For further information seehttps://unittestbot.org
 */

#include "main_dot_c_test.h"

#include "gtest/gtest.h"
namespace UTBot {
static const float utbot_abs_error = 1e-6;


#pragma region regression
TEST(regression, exit_code_test_1)
{
    int actual = exit_code(1);
    EXPECT_EQ(0, actual);
}

TEST(regression, exit_code_test_2)
{
    int actual = exit_code(0);
    EXPECT_EQ(1, actual);
}

TEST(regression, main2_test_1)
{
    char _argv[2][2] = {{'c', 'c'}, {'b', 'a'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_169_0 = 0; it_169_0 < 2; it_169_0 ++) {
        argv[it_169_0] = _argv[it_169_0];
    }
    argv[2] = NULL;
    int actual = main2(1, argv);
    EXPECT_EQ(0, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'b', 'a'}};
    for (int it_170_0 = 0; it_170_0 < 2; it_170_0 ++) {
        for (int it_170_1 = 0; it_170_1 < 2; it_170_1 ++) {
            EXPECT_EQ(expected_argv[it_170_0][it_170_1], _argv[it_170_0][it_170_1]);
        }
    }
}

TEST(regression, main2_test_2)
{
    char _argv[2][2] = {{'c', 'c'}, {'b', 'a'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_171_0 = 0; it_171_0 < 2; it_171_0 ++) {
        argv[it_171_0] = _argv[it_171_0];
    }
    argv[2] = NULL;
    int actual = main2(0, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'b', 'a'}};
    for (int it_172_0 = 0; it_172_0 < 2; it_172_0 ++) {
        for (int it_172_1 = 0; it_172_1 < 2; it_172_1 ++) {
            EXPECT_EQ(expected_argv[it_172_0][it_172_1], _argv[it_172_0][it_172_1]);
        }
    }
}

TEST(regression, main_test_1)
{
    char _argv[2][2] = {{'c', 'c'}, {'8', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_173_0 = 0; it_173_0 < 2; it_173_0 ++) {
        argv[it_173_0] = _argv[it_173_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(8, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'8', '\0'}};
    for (int it_174_0 = 0; it_174_0 < 2; it_174_0 ++) {
        for (int it_174_1 = 0; it_174_1 < 2; it_174_1 ++) {
            EXPECT_EQ(expected_argv[it_174_0][it_174_1], _argv[it_174_0][it_174_1]);
        }
    }
}

TEST(regression, main_test_2)
{
    char _argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_175_0 = 0; it_175_0 < 2; it_175_0 ++) {
        argv[it_175_0] = _argv[it_175_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(3, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'1', '\0'}};
    for (int it_176_0 = 0; it_176_0 < 2; it_176_0 ++) {
        for (int it_176_1 = 0; it_176_1 < 2; it_176_1 ++) {
            EXPECT_EQ(expected_argv[it_176_0][it_176_1], _argv[it_176_0][it_176_1]);
        }
    }
}

TEST(regression, main_test_3)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', ':'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_177_0 = 0; it_177_0 < 2; it_177_0 ++) {
        argv[it_177_0] = _argv[it_177_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', ':'}};
    for (int it_178_0 = 0; it_178_0 < 2; it_178_0 ++) {
        for (int it_178_1 = 0; it_178_1 < 2; it_178_1 ++) {
            EXPECT_EQ(expected_argv[it_178_0][it_178_1], _argv[it_178_0][it_178_1]);
        }
    }
}

TEST(regression, main_test_4)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_179_0 = 0; it_179_0 < 2; it_179_0 ++) {
        argv[it_179_0] = _argv[it_179_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {' ', '\0'}};
    for (int it_180_0 = 0; it_180_0 < 2; it_180_0 ++) {
        for (int it_180_1 = 0; it_180_1 < 2; it_180_1 ++) {
            EXPECT_EQ(expected_argv[it_180_0][it_180_1], _argv[it_180_0][it_180_1]);
        }
    }
}

TEST(regression, main_test_5)
{
    char _argv[2][2] = {{'c', 'c'}, {' ', 'a'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_181_0 = 0; it_181_0 < 2; it_181_0 ++) {
        argv[it_181_0] = _argv[it_181_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {' ', 'a'}};
    for (int it_182_0 = 0; it_182_0 < 2; it_182_0 ++) {
        for (int it_182_1 = 0; it_182_1 < 2; it_182_1 ++) {
            EXPECT_EQ(expected_argv[it_182_0][it_182_1], _argv[it_182_0][it_182_1]);
        }
    }
}

TEST(regression, main_test_6)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'A'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_183_0 = 0; it_183_0 < 2; it_183_0 ++) {
        argv[it_183_0] = _argv[it_183_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'A'}};
    for (int it_184_0 = 0; it_184_0 < 2; it_184_0 ++) {
        for (int it_184_1 = 0; it_184_1 < 2; it_184_1 ++) {
            EXPECT_EQ(expected_argv[it_184_0][it_184_1], _argv[it_184_0][it_184_1]);
        }
    }
}

TEST(regression, main_test_7)
{
    char _argv[2][2] = {{'c', 'c'}, {'+', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_185_0 = 0; it_185_0 < 2; it_185_0 ++) {
        argv[it_185_0] = _argv[it_185_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'+', 'c'}};
    for (int it_186_0 = 0; it_186_0 < 2; it_186_0 ++) {
        for (int it_186_1 = 0; it_186_1 < 2; it_186_1 ++) {
            EXPECT_EQ(expected_argv[it_186_0][it_186_1], _argv[it_186_0][it_186_1]);
        }
    }
}

TEST(regression, main_test_8)
{
    char _argv[2][2] = {{'c', 'c'}, {'+', 'A'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_187_0 = 0; it_187_0 < 2; it_187_0 ++) {
        argv[it_187_0] = _argv[it_187_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'+', 'A'}};
    for (int it_188_0 = 0; it_188_0 < 2; it_188_0 ++) {
        for (int it_188_1 = 0; it_188_1 < 2; it_188_1 ++) {
            EXPECT_EQ(expected_argv[it_188_0][it_188_1], _argv[it_188_0][it_188_1]);
        }
    }
}

TEST(regression, main_test_9)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_189_0 = 0; it_189_0 < 2; it_189_0 ++) {
        argv[it_189_0] = _argv[it_189_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', 'c'}};
    for (int it_190_0 = 0; it_190_0 < 2; it_190_0 ++) {
        for (int it_190_1 = 0; it_190_1 < 2; it_190_1 ++) {
            EXPECT_EQ(expected_argv[it_190_0][it_190_1], _argv[it_190_0][it_190_1]);
        }
    }
}

TEST(regression, main_test_10)
{
    char _argv[2][2] = {{'c', 'c'}, {'-', '\0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_191_0 = 0; it_191_0 < 2; it_191_0 ++) {
        argv[it_191_0] = _argv[it_191_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'-', '\0'}};
    for (int it_192_0 = 0; it_192_0 < 2; it_192_0 ++) {
        for (int it_192_1 = 0; it_192_1 < 2; it_192_1 ++) {
            EXPECT_EQ(expected_argv[it_192_0][it_192_1], _argv[it_192_0][it_192_1]);
        }
    }
}

TEST(regression, main_test_11)
{
    char _argv[2][2] = {{'c', 'c'}, {'+', '{'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_193_0 = 0; it_193_0 < 2; it_193_0 ++) {
        argv[it_193_0] = _argv[it_193_0];
    }
    argv[2] = NULL;
    int actual = main(2, argv);
    EXPECT_EQ(2, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'+', '{'}};
    for (int it_194_0 = 0; it_194_0 < 2; it_194_0 ++) {
        for (int it_194_1 = 0; it_194_1 < 2; it_194_1 ++) {
            EXPECT_EQ(expected_argv[it_194_0][it_194_1], _argv[it_194_0][it_194_1]);
        }
    }
}

TEST(regression, main_test_12)
{
    char _argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_195_0 = 0; it_195_0 < 2; it_195_0 ++) {
        argv[it_195_0] = _argv[it_195_0];
    }
    argv[2] = NULL;
    int actual = main(0, argv);
    EXPECT_EQ(1, actual);
    char expected_argv[2][2] = {{'c', 'c'}, {'c', 'c'}};
    for (int it_196_0 = 0; it_196_0 < 2; it_196_0 ++) {
        for (int it_196_1 = 0; it_196_1 < 2; it_196_1 ++) {
            EXPECT_EQ(expected_argv[it_196_0][it_196_1], _argv[it_196_0][it_196_1]);
        }
    }
}

#pragma endregion
#pragma region error
TEST(error, main_test_13)
{
    char _argv[2][2] = {{'a', 'c'}, {'\f', '0'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_197_0 = 0; it_197_0 < 2; it_197_0 ++) {
        argv[it_197_0] = _argv[it_197_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_14)
{
    char _argv[2][2] = {{'a', 'c'}, {'\f', '-'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_198_0 = 0; it_198_0 < 2; it_198_0 ++) {
        argv[it_198_0] = _argv[it_198_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_15)
{
    char _argv[2][2] = {{'a', 'c'}, {'\f', '+'}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_199_0 = 0; it_199_0 < 2; it_199_0 ++) {
        argv[it_199_0] = _argv[it_199_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

TEST(error, main_test_16)
{
    char _argv[2][2] = {{'a', 'c'}, {'\f', ' '}};
    char ** argv = (char **) calloc(3, sizeof(char *));
    for (int it_200_0 = 0; it_200_0 < 2; it_200_0 ++) {
        argv[it_200_0] = _argv[it_200_0];
    }
    argv[2] = NULL;
    main(2, argv);
}

#pragma endregion
}
